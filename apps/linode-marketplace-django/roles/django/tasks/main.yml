---
 # django
- name: Install required packages
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - python3-pip
    - python3-venv
    - python3-dev
    - libpq-dev
    - postgresql
    - postgresql-contrib
    - nginx
    - certbot

# Postgres
- name: Configure PostgreSQL
  postgresql_db:
    name: django
    state: present
  become: yes
  become_user: postgres

- name: Create PostgreSQL user
  postgresql_user:
    name: django
    password: "{{ postgres_db_pass }}"
    encrypted: yes
    state: present
  become: yes
  become_user: postgres

# https://docs.djangoproject.com/en/5.0/ref/databases/#optimizing-postgresql-s-configuration
- name: Set client_encoding for django
  postgresql_query:
    db: django
    login_user: postgres
    login_unix_socket: /var/run/postgresql
    query:
      - "ALTER ROLE django SET client_encoding TO 'utf8';"
  become: yes
  become_user: postgres

- name: Set default_transaction_isolation for django
  postgresql_query:
    db: django
    login_user: postgres
   # login_password: "{{ postgres_db_pass }}"
    query:
      - "ALTER ROLE django SET default_transaction_isolation TO 'read committed';"
  become: yes
  become_user: postgres

- name: Set timezone for django
  postgresql_query:
    db: django
    login_user: postgres
    login_password: "{{ postgres_db_pass }}"
    query:
      - "ALTER ROLE django SET timezone TO 'UTC';"
  become: yes
  become_user: postgres

# Create directory and setup venv
#- name: Create directory for Django App
#  file:
#    path: /var/www/Django
#    state: directory

- name: Install Gunicorn and Django
  ansible.builtin.pip:
    name: "{{ item }}"
    executable: pip3
    state: present
  loop:
    - gunicorn
    - django

- name: Create Django project
  command: python3 -m django startproject Django
  args:
    chdir: /var/www/
  become_user: "{{ username }}"

- name: copy settings template
  template:
    src: templates/settings.py.j2
    dest: /var/www/Django/settings.py
    force: yes
  become_user: "{{ username }}"

- name: Generate a new SECRET_KEY
  command: "python3 -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'"
  register: new_secret_key

- name: Replace SECRET_KEY line in Django settings
  lineinfile:
    path: /var/www/Django/settings.py
    regexp: '^SECRET_KEY = '
    line: 'SECRET_KEY = "{{ new_secret_key.stdout }}"'
  become_user: "{{ username }}"

- name: Run makemigrations
  command: python3 manage.py makemigrations
  args:
    chdir: /var/www/Django/
  become_user: "{{ username }}"

- name: Run migrate
  command: python3 manage.py migrate
  args:
    chdir: /var/www/Django/
  become_user: "{{ username }}"

- name: Create Django superuse
  command: echo "from django.contrib.auth.models import User; User.objects.create_superuser('{{ django_user }}', '{{ soa_email_address }}', '{{ django_password }}')" | python3 manage.py shell
  args:
    chdir: /var/www/Django/
  become_user: "{{ username }}"

#- name: Run collectstatic
#  command: python3 manage.py collectstatic --noinput
#  args:
#    chdir: /var/www/Django/
#  become_user: "{{ username }}"

# Gunicorn
- name: configure Gunicorn socket
  template:
    src: gunicorn.socket.j2
    dest: /etc/systemd/system/gunicorn.socket

- name: configure Gunicorn systemd service
  template:
    src: gunicorn.service.j2
    dest: /etc/systemd/system/gunicorn.service

- name: start and enable Gunicorn service
  systemd:
    name: gunicorn
    state: started
    enabled: yes

# Nginx

- name: update default config file 
  template:
    src: templates/default.conf.j2
    dest: "/etc/nginx/sites-available/{{ _domain }}"  

- name: reload Nginx service to pickup default changes
  systemd:
    name: nginx
    state: reloaded

# ssl_certbot
- name: setting up ssl certificate
  import_role:
    name: certbot_ssl

- name: config file setup
  template:
    src: templates/nginx.conf.j2
    dest: "/etc/nginx/sites-available/{{ _domain }}"   

- name: create a symbolic link for the nginx configuration
  file:
    src: "/etc/nginx/sites-available/{{ _domain }}"
    dest: "/etc/nginx/sites-enabled/{{ _domain }}"
    state: link

- name: unlink the default nginx configuration
  file:
    path: "/etc/nginx/sites-enabled/default"
    state: absent
  notify: reload nginx service

