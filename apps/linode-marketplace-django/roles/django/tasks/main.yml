---
 # django
- name: Install required packages
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - python3-pip
    - python3-venv
    - python3-dev
    - libpq-dev
    - postgresql
    - postgresql-contrib
    - nginx
    - certbot

# Postgres
- name: Configure PostgreSQL
  postgresql_db:
    name: django
    state: present
  become: yes
  become_user: postgres

- name: Create PostgreSQL user
  postgresql_user:
    name: django
    password: "{{ postgres_db_pass }}"
    encrypted: yes
    state: present
  become: yes
  become_user: postgres

# https://docs.djangoproject.com/en/5.0/ref/databases/#optimizing-postgresql-s-configuration
- name: Set client_encoding for Django  
  postgresql_script:
    db: django
    executable: psql
    cmd: "ALTER ROLE django SET client_encoding TO 'utf8';"
  become: yes
  become_user: postgres
  
- name: Set default_transaction_isolation for Django
  postgresql_script:
    db: django
    executable: psql
    cmd: "ALTER ROLE django SET default_transaction_isolation TO 'read committed';"
  become: yes
  become_user: postgres

- name: Set timezone for Django
  postgresql_script:
    db: django
    executable: psql
    cmd: "ALTER ROLE django SET timezone TO 'UTC';"
  become: yes
  become_user: postgres

# Create directory and setup venv
- name: Create directory for Django App
  file:
    path: /var/www/Django
    state: directory

- name: Run venv in dir
  command: python3 -m venv django_env
  args:
    chdir: /var/www/Django
  become: yes

- name: Run venv in dir
  command: source django_env/bin/activate
  args:
    chdir: /var/www/Django
  become: yes

- name: Install Gunicorn and Django
  pip:
    name:
      - gunicorn
      - Django

- name: Create Django project
  community.general.django_manage:
    command: startproject
    args: Django /var/www/Django
  become: yes

- name: copy settings template
  template:
    src: templates/settings.py.j2
    dest: /var/www/Django/Django/settings.py
    force: yes
  become: yes

- name: Generate a new SECRET_KEY
  command: "python3 -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'"
  register: new_secret_key

- name: Replace SECRET_KEY line in Django settings
  lineinfile:
    path: /var/www/Django/Django/settings.py
    regexp: '^SECRET_KEY = '
    line: 'SECRET_KEY = "{{ new_secret_key.stdout }}"'
  become: yes

- name: Make Migrations
  community.general.django_manage:
    command: "makemigrations"
    app_path: "/var/www/Django/"
    manage_py: "/var/www/Django/manage.py"
  become_user: "{{ username }}"

- name: Apply Migrations
  community.general.django_manage:
    command: "migrate"
    app_path: "/var/www/Django/"
    manage_py: "/var/www/Django/manage.py"
  become_user: "{{ username }}"

- name: Create Django superuser
  community.general.django_manage:
    app_path: /var/www/Django
    command: shell
    args:
      stdin: "from django.contrib.auth.models import User; User.objects.create_superuser('{{ django_user }}', '{{ soa_email_address }}', '{{ django_password }}')"

- name: Apply collectstatic
  community.general.django_manage:
    command: "collectstatic"
    app_path: "/var/www/Django/"
    manage_py: "/var/www/Django/manage.py"
  become_user: "{{ username }}"

# Gunicorn
- name: Configure Gunicorn socket
  template:
    src: gunicorn.socket.j2
    dest: /etc/systemd/system/gunicorn.socket

- name: Configure Gunicorn systemd service
  template:
    src: gunicorn.service.j2
    dest: /etc/systemd/system/gunicorn.service

- name: Start and enable Gunicorn service
  systemd:
    name: gunicorn
    state: started
    enabled: yes

# Nginx

- name: config file setup
  template:
    src: templates/nginx.conf.j2
    dest: "/etc/nginx/sites-available/{{ _domain }}"   

- name: create a symbolic link for the nginx configuration
  file:
    src: "/etc/nginx/sites-available/{{ _domain }}"
    dest: "/etc/nginx/sites-enabled/{{ _domain }}"
    state: link

- name: unlink the default nginx configuration
  file:
    path: "/etc/nginx/sites-enabled/default"
    state: absent
  notify: reload nginx service

