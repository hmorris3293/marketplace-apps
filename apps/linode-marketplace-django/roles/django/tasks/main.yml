---
 # django
- name: Install required packages
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - python3-pip
    - python3-venv
    - python3-dev
    - python3-psycopg2
    - libpq-dev
    - postgresql
    - postgresql-contrib
    - nginx
    - certbot
    - gunicorn
    - python3-django

# configure env var for Django
- name: Add DJANGO_SETTINGS_MODULE to .bashrc
  lineinfile:
    path: ~/.bashrc
    line: 'export DJANGO_SETTINGS_MODULE=Django.settings'
    insertafter: EOF
  become_user: {{ username }}

# Postgres
- name: Configure PostgreSQL
  postgresql_db:
    name: django
    state: present
  become: yes
  become_user: postgres

- name: Create PostgreSQL user
  postgresql_user:
    name: django
    password: "{{ postgres_db_pass }}"
    encrypted: yes
    state: present
  become: yes
  become_user: postgres

# https://docs.djangoproject.com/en/5.0/ref/databases/#optimizing-postgresql-s-configuration
- name: Set client_encoding for django
  postgresql_query:
    db: django
    login_user: postgres
    login_unix_socket: /var/run/postgresql
    query:
      - "ALTER ROLE django SET client_encoding TO 'utf8';"
  become: yes
  become_user: postgres

- name: Set default_transaction_isolation for django
  postgresql_query:
    db: django
    login_user: postgres
    query:
      - "ALTER ROLE django SET default_transaction_isolation TO 'read committed';"
  become: yes
  become_user: postgres

- name: Set timezone for django
  postgresql_query:
    db: django
    login_user: postgres
    login_password: "{{ postgres_db_pass }}"
    query:
      - "ALTER ROLE django SET timezone TO 'UTC';"
  become: yes
  become_user: postgres

- name: Create Django project
  command: django-admin startproject Django
  args:
    chdir: /var/www/
  become_user: {{ username }}

- name: copy settings template
  template:
    src: templates/settings.py.j2
    dest: /var/www/Django/Django/settings.py
    force: yes
  become_user: {{ username }}

- name: Generate a new SECRET_KEY
  command: 'django-admin shell -c "from django.core.management import utils; print(utils.get_random_secret_key())"'
  register: new_secret_key

- name: Replace SECRET_KEY line in Django settings
  lineinfile:
    path: /var/www/Django/Django/settings.py
    regexp: '^SECRET_KEY = '
    line: 'SECRET_KEY = "{{ new_secret_key.stdout }}"'
  become_user: {{ username }}

- name: Run makemigrations
  command: 'python3 manage.py makemigrations'
  args:
    chdir: /var/www/Django/
  become_user: {{ username }}

- name: Run migrate
  command: 'python3 manage.py migrate'
  args:
    chdir: /var/www/Django/
  become_user: "{{ username }}"

- name: Create Django superuse
  command: django-admin shell -c "from django.contrib.auth.models import User; User.objects.create_superuser('{{ django_user }}', '{{ soa_email_address }}', '{{ django_password }}')"
  args:
    chdir: /var/www/Django/
  become_user: {{ username }}

#- name: Run collectstatic
#  command: python3 manage.py collectstatic --noinput
#  args:
#    chdir: /var/www/Django/
#  become_user: "{{ username }}"

# Gunicorn
- name: configure Gunicorn socket
  template:
    src: gunicorn.socket.j2
    dest: /etc/systemd/system/gunicorn.socket

- name: configure Gunicorn systemd service
  template:
    src: gunicorn.service.j2
    dest: /etc/systemd/system/gunicorn.service

- name: Reload systemd
  systemd:
    state: reloaded

- name: start and enable Gunicorn service
  systemd:
    name: gunicorn
    state: started
    enabled: yes

# Nginx

- name: update default config file 
  template:
    src: templates/default.conf.j2
    dest: "/etc/nginx/sites-available/{{ _domain }}"  

- name: stop nginx to run certbot standalone
  systemd:
    name: nginx
    state: stopped

# ssl_certbot
- name: setting up ssl certificate
  import_role:
    name: certbot_ssl

- name: nginx config file setup
  template:
    src: templates/nginx.conf.j2
    dest: "/etc/nginx/nginx.conf"  

- name: vhost file 
  template:
    src: templates/nginx.conf.j2
    dest: "/etc/nginx/sites-available/{{ _domain }}"   

- name: create a symbolic link for the nginx configuration
  file:
    src: "/etc/nginx/sites-available/{{ _domain }}"
    dest: "/etc/nginx/sites-enabled/{{ _domain }}"
    state: link

- name: unlink the default nginx configuration
  file:
    path: "/etc/nginx/sites-enabled/default"
    state: absent

- name: start nginx after certbot gen
  systemd:
    name: nginx
    state: start



