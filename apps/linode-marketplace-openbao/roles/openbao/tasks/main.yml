---
 # openbao
- name: install required packages
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - wget
    - unzip

- name: download openbao {{ openbao_version }}
  get_url: 
    url: "{{ openbao_download_link }}"
    dest: "/tmp/openbao.zip"

- name: unzip openbao deb file
  unarchive:
    src: "/tmp/openbao.zip"
    dest: "/tmp"

- name: Install the .deb package
  apt:
    deb: "{{ openbao_deb_file }}"

#SSL 
- name: generate private key
  openssl_privatekey:
    path: /opt/openbao/tls/openbao.key
    size: 4096
    owner: openbao
    group: openbao
  register: key

- name: generate csr
  community.crypto.openssl_csr:
    path: '/opt/openbao/tls/openbao.csr'
    privatekey_path: '/opt/openbao/tls/openbao.key'
    country_name: '{{ country_name }}'
    state_or_province_name: '{{ state_or_province_name }}'
    locality_name: '{{ locality_name }}'
    organization_name: '{{ organization_name }}'
    email_address: '{{ email_address }}'
    common_name: 'openbao'
    subject_alt_name: 'IP:127.0.0.1'
    owner: openbao
    group: openbao
    mode: '0644'
  register: csr

- name: generate self-signed certificate
  openssl_certificate:
    path: /opt/openbao/tls/openbao.crt
    privatekey_path: /opt/openbao/tls/openbao.key
    csr_path: /opt/openbao/tls/openbao.csr
    provider: selfsigned
    owner: openbao
    group: openbao
    mode: '0644'
  register: cert

# # create root ca for signing
# - name: generate ca key
#   community.crypto.openssl_privatekey:
#     path: '/opt/openbao/tls/ca.key'
#     passphrase: '{{ ca_password }}'
#     cipher: auto
#     return_content: true
#     owner: openbao
#     group: openbao
#   #no_log: true
#   register: ca_key




# - name: generate ca crt
#   community.crypto.x509_certificate:
#     path: '/opt/openbao/tls/ca.crt'
#     privatekey_path: '/opt/openbao/tls/ca.key'
#     privatekey_passphrase: '{{ ca_password }}'
#     csr_path: '/opt/openbao/tls/ca.csr'
#     selfsigned_not_after: +3650d
#     provider: selfsigned
#     owner: openbao
#     group: openbao
#     mode: 0640
#     return_content: true
#   register: ca_crt

# # generate ssl keys

# - name: generate server key
#   community.crypto.openssl_privatekey:
#     path: '/opt/openbao/tls/openbao.key'
#     owner: openbao
#     group: openbao
#     mode: 0600
#     return_content: true

# # generate csrs

# - name: generate server csr
#   community.crypto.openssl_csr:
#     path: '/opt/openbao/tls/openbao.csr'
#     privatekey_path: '/opt/openbao/tls/openbao.key'
#     country_name: '{{ country_name }}'
#     state_or_province_name: '{{ state_or_province_name }}'
#     locality_name: '{{ locality_name }}'
#     organization_name: '{{ organization_name }}'
#     email_address: '{{ email_address }}'
#     common_name: 'openbao'
#     subject_alt_name: 'IP: 127.0.0.1'
#     owner: openbao
#     group: openbao


# # sign cert with ca and get client cert
# - name: generate server cert signed with ca cert
#   community.crypto.x509_certificate:
#     path: '/opt/openbao/tls/openbao.crt'
#     privatekey_path: '/opt/openbao/tls/openbao.key'
#     csr_path: '/opt/openbao/tls/openbao.csr'
#     ownca_content: '{{ ca_crt.certificate }}'
#     ownca_privatekey_content: '{{ ca_key.privatekey }}'
#     ownca_privatekey_passphrase: '{{ ca_password }}'
#     ownca_not_after: +3650d
#     provider: ownca
#     #subject_alt_name: 'IP: 127.0.0.1'
#     owner: openbao
#     group: openbao
#     mode: 0640
#     return_content: true
#   register: server_certs

# make backup of default
- name: creating openbao config backup
  copy:
    src: "/etc/openbao/openbao.hcl"
    dest: "/etc/openbao/openbao.hcl.bak"
    remote_src: yes
    owner: openbao
    group: openbao
    mode: '0644'

# update openbao config
- name: update openbao config
  template:
    src: "templates/openbao.hcl.j2"
    dest: "/etc/openbao/openbao.hcl"  

# update systemd file openbao 
- name: update openbao config
  template:
    src: "templates/openbao.service"
    dest: "/lib/systemd/system/openbao.service" 

- name: reload systemd daemon
  systemd:
    daemon_reload: yes     

- name: enable openbao service
  systemd:
    name: openbao
    enabled: yes
    state: started

- name: execute bao operator init command and capture output
  command: bao operator init -key-shares=3 -key-threshold=2 | grep 'Token\|Unseal'
  register: bao_output

- debug:
    var: bao_output.stdout_lines
